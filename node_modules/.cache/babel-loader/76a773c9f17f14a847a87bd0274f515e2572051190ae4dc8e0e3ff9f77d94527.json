{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sachi\\\\OneDrive\\\\Desktop\\\\weatherapp\\\\src\\\\components\\\\AutoComplete.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport './Style/Weather.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutoComplete = ({\n  options\n}) => {\n  _s();\n  const [value, setValue] = useState(\"\");\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const suggestions = options.filter(({\n    cityName\n  }) => cityName.toLowerCase().includes(value.toLowerCase()));\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n  const handleSuggestionClick = suggetion => {\n    setValue(suggetion);\n    setShowSuggestions(false);\n  };\n  console.log(suggestions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"autocomplete\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: value,\n      onChange: handleChange,\n      placeholder: \"Search\",\n      onFocus: () => setShowSuggestions(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), showSuggestions && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"suggestions\",\n      children: suggestions.map(({\n        cityName,\n        cityState,\n        Celicus,\n        cloud,\n        nature\n      }) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSuggestionClick(cityName),\n        children: [\" \", cityName, \",\", cityState, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: Celicus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 116\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: cloud\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 138\n        }, this)]\n      }, cityName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n_s(AutoComplete, \"2n+iWoUeiEV5nSvkWOTyelg3VqU=\");\n_c = AutoComplete;\nexport default AutoComplete;\nvar _c;\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","AutoComplete","options","_s","value","setValue","showSuggestions","setShowSuggestions","suggestions","filter","cityName","toLowerCase","includes","handleChange","event","target","handleSuggestionClick","suggetion","console","log","className","children","onChange","placeholder","onFocus","fileName","_jsxFileName","lineNumber","columnNumber","map","cityState","Celicus","cloud","nature","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sachi/OneDrive/Desktop/weatherapp/src/components/AutoComplete.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport './Style/Weather.css'\r\nconst AutoComplete = ({ options}) => {\r\n    const [value, setValue] = useState(\"\");\r\n    const [showSuggestions, setShowSuggestions] = useState(false);\r\n    const suggestions = options.filter(({cityName}) => cityName.toLowerCase().includes(value.toLowerCase()))\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    const handleSuggestionClick = (suggetion) => {\r\n        setValue(suggetion);\r\n        setShowSuggestions(false);\r\n    }\r\nconsole.log(suggestions);\r\n    return (\r\n        <div className=\"autocomplete\">\r\n            <input\r\n                value={value}\r\n                onChange={handleChange}\r\n                placeholder=\"Search\"\r\n                onFocus={() => setShowSuggestions(true)}\r\n            />\r\n            {showSuggestions && (\r\n                <ul className=\"suggestions\">\r\n                    {suggestions.map(({cityName,cityState,Celicus,cloud,nature}) => (\r\n                        <li onClick={() => handleSuggestionClick(cityName)} key={cityName}> {cityName},{cityState} <span>{Celicus}</span><span>{cloud}</span></li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AutoComplete;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAC5B,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMW,WAAW,GAAGN,OAAO,CAACO,MAAM,CAAC,CAAC;IAACC;EAAQ,CAAC,KAAKA,QAAQ,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACR,KAAK,CAACO,WAAW,CAAC,CAAC,CAAC,CAAC;EACxG,MAAME,YAAY,GAAIC,KAAK,IAAK;IAC5BT,QAAQ,CAACS,KAAK,CAACC,MAAM,CAACX,KAAK,CAAC;EAChC,CAAC;EAED,MAAMY,qBAAqB,GAAIC,SAAS,IAAK;IACzCZ,QAAQ,CAACY,SAAS,CAAC;IACnBV,kBAAkB,CAAC,KAAK,CAAC;EAC7B,CAAC;EACLW,OAAO,CAACC,GAAG,CAACX,WAAW,CAAC;EACpB,oBACIR,OAAA;IAAKoB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBACzBrB,OAAA;MACII,KAAK,EAAEA,KAAM;MACbkB,QAAQ,EAAET,YAAa;MACvBU,WAAW,EAAC,QAAQ;MACpBC,OAAO,EAAEA,CAAA,KAAMjB,kBAAkB,CAAC,IAAI;IAAE;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,EACDtB,eAAe,iBACZN,OAAA;MAAIoB,SAAS,EAAC,aAAa;MAAAC,QAAA,EACtBb,WAAW,CAACqB,GAAG,CAAC,CAAC;QAACnB,QAAQ;QAACoB,SAAS;QAACC,OAAO;QAACC,KAAK;QAACC;MAAM,CAAC,kBACvDjC,OAAA;QAAIkC,OAAO,EAAEA,CAAA,KAAMlB,qBAAqB,CAACN,QAAQ,CAAE;QAAAW,QAAA,GAAgB,GAAC,EAACX,QAAQ,EAAC,GAAC,EAACoB,SAAS,EAAC,GAAC,eAAA9B,OAAA;UAAAqB,QAAA,EAAOU;QAAO;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAAA5B,OAAA;UAAAqB,QAAA,EAAOW;QAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA,GAA5ElB,QAAQ;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAwE,CAC5I;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACP;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEA,CAAC;AAEd,CAAC;AAACzB,EAAA,CA/BIF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAiClB,eAAeA,YAAY;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}